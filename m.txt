<template>
  <div class="search-container">
    <v-text-field
      v-model="search"
      label="Search"
      prepend-inner-icon="mdi-magnify"
      variant="outlined"
      hide-details
      single-line
    ></v-text-field>
  </div>
  <v-data-table
    :group-by="groupBy"
    :headers="headers"
    :items="filteredStudents"
    item-value="name"
  >
    <template v-slot:group-header="{ item, toggleGroup, isGroupOpen }">
      <tr :key="`group-${item.value}`">
        <td>
          <v-btn
            :icon="isGroupOpen(item) ? '$expand' : '$next'"
            size="small"
            variant="text"
            @click="toggleGroup(item)"
          ></v-btn>
        </td>
        <td>{{ groupInfo[item.value]?.name }}</td>
        <td>{{ groupInfo[item.value]?.department }}</td>
        <td>{{ groupInfo[item.value]?.id }}</td>
        <td>{{ groupInfo[item.value]?.enrollment }}</td>
        <td>{{ groupInfo[item.value]?.github_id }}</td>
        <td>{{ groupInfo[item.value]?.year }}</td>
        <td>{{ groupInfo[item.value]?.semester }}</td>
        <td>{{ groupInfo[item.value]?.course_name }}</td>
        <td>{{ groupInfo[item.value]?.commit }}</td>
        <td>{{ groupInfo[item.value]?.pr }}</td>
        <td>{{ groupInfo[item.value]?.issue }}</td>
        <td>{{ groupInfo[item.value]?.num_repos }}</td>
      </tr>
    </template>
    <template v-slot:item="{ item }">
      <tr :key="item.key">
        <td></td>
        <td></td>
        <td>{{ item.department }}</td>
        <td></td>
        <td>{{ item.enrollment }}</td>
        <td>{{ item.github_id }}</td>
        <td>{{ item.year }}</td>
        <td>{{ item.semester }}</td>
        <td>{{ item.course_name }}</td>
        <td>{{ item.commit }}</td>
        <td>{{ item.pr }}</td>
        <td>{{ item.issue }}</td>
        <td>{{ item.num_repos }}</td>
      </tr>
    </template>
  </v-data-table>
</template>

<script>
import axios from 'axios'

export default {
  data() {
    return {
      search: '',
      groupBy: [
        {
          key: 'id',
          order: 'asc',
        },
      ],
      headers: [
        { title: '이름', key: 'name' },
        { title: '학과', key: 'department' },
        { title: '학번', key: 'id' },
        { title: '재학상태', key: 'enrollment' },
        { title: 'GitHub ID', key: 'github_id' },
        { title: '연도', key: 'year' },
        { title: '학기', key: 'semester' },
        { title: '과목명', key: 'course_name' },
        { title: 'Commit 수', key: 'commit' },
        { title: 'PR 수', key: 'pr' },
        { title: 'Issue 수', key: 'issue' },
        { title: 'Repo 수', key: 'num_repos' },
      ],
      students: [],
      groupInfo: {},
    }
  },
  created() {
    this.fetchData()
  },
  methods: {
    async fetchData() {
      try {
        const response = await axios.get(
          'http://119.28.232.108:8000/api/account/student_read_db',
          {
            params: {
              github_id: 'kyne0127',
            },
          }
        )
        this.processData(response.data)
      } catch (error) {
        console.error('Error fetching data:', error)
      }
    },
    processData(data) {
      const groupInfo = {}
      const students = []

      data.forEach(group => {
        const [groupItem, ...studentItems] = group

        groupInfo[groupItem.id] = {
          name: groupItem.name,
          department: groupItem.department,
          id: groupItem.id,
          enrollment: groupItem.enrollment,
          github_id: groupItem.github_id,
          year: groupItem.year,
          semester: groupItem.semester,
          course_name: groupItem.course_name,
          commit: groupItem.total_commit,
          pr: groupItem.total_pr,
          issue: groupItem.total_issue,
          num_repos: groupItem.total_repos,
        }

        studentItems.forEach((student, index) => {
          const uniqueKey = `${student.id}-${index}-${student.course_name}-${student.commit}-${student.pr}-${student.issue}-${student.num_repos}`;
          students.push({
            key: uniqueKey, // 고유한 key 값 생성
            name: student.name,
            year: student.year,
            semester: student.semester,
            department: student.department,
            id: student.id,
            enrollment: student.enrollment,
            github_id: student.github_id,
            course_name: student.course_name,
            commit: student.commit,
            pr: student.pr,
            issue: student.issue,
            num_repos: student.num_repos,
          })
          console.log(`Generated key for student: ${uniqueKey}`); // 디버깅 출력
        })
      })

      console.log('Processed Group Info:', groupInfo)
      console.log('Processed Students:', students)

      this.groupInfo = groupInfo
      this.students = students
    },
  },
  computed: {
    filteredStudents() {
      const search = this.search.toLowerCase()
      return this.students.filter(student => {
        const group = this.groupInfo[student.id]
        return (
          // 그룹 정보에서 검색 (year, pr 등의 그룹 검색에서 필요없는 것도 일단 남겨둠)
          (group.year && group.year.toString().includes(search)) ||
          (group.semester && group.semester.toString().includes(search)) ||
          group.name.toLowerCase().includes(search) ||
          group.department.toLowerCase().includes(search) ||
          group.id.toLowerCase().includes(search) ||
          group.enrollment.toLowerCase().includes(search) ||
          group.github_id.toLowerCase().includes(search) ||
          (group.course_name && 
            group.course_name.toLowerCase().includes(search)) ||
          group.commit.toString().includes(search) ||
          group.pr.toString().includes(search) ||
          group.issue.toString().includes(search) ||
          group.num_repos.toString().includes(search) ||
          // 학생 정보에서 검색
          student.name.toLowerCase().includes(search) ||
          student.course_name.toLowerCase().includes(search) ||
          student.year.toString().includes(search) ||
          student.semester.toString().includes(search) ||
          student.commit.toString().includes(search) ||
          student.pr.toString().includes(search) ||
          student.issue.toString().includes(search)
        )
      })
    },
  },
}
</script>

<style scoped>
.search-container {
  display: flex;
  justify-content: flex-end; /* 오른쪽으로 정렬 */
  margin-bottom: 10px;
}

.search-container .v-text-field {
  max-width: 300px; /* 원하는 크기로 조정 */
}
</style>
